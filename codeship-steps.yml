- name: test app engine deployments
  type: parallel
  steps:
    - name: test java app engine deployment
      service: deployment-ansible
      command: bash -c "CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="${GOOGLE_KEY_CONTENT_TEST_JAVA}" codeship_app_engine_deploy -d maven -f /deploy/test-app-engine-java -P codeship-deploy-test-java -c"
    - name: test ruby app engine deployment
      service: deployment-ansible
      command: bash -c "CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="${GOOGLE_KEY_CONTENT_TEST_RUBY}" codeship_app_engine_deploy -f /deploy/test-app-engine-ruby -P codeship-deploy-test-ruby -c"
    - name: python based deployment checks
      type: serial
      steps:
        - name: test python app engine deployment
          service: deployment-ansible
          command: bash -c 'CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="${GOOGLE_KEY_CONTENT_TEST_PYTHON}" codeship_app_engine_deploy -f /deploy/test-app-engine-python -P codeship-deploy-test-py -c'
        - name: test that a git repository can be reset with -C
          service: deployment-ansible
          command: bash -c 'cd /deploy/test-app-engine-python && git config --global user.email "you@example.com" && git config --global user.name "Your Name" && git init && git add . && git commit -m "foo" && echo "foo" > main.py && CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="${GOOGLE_KEY_CONTENT_TEST_PYTHON}" codeship_app_engine_deploy -f /deploy/test-app-engine-python -P codeship-deploy-test-py -c -C'
        - name: negative test for a git repository reset where we dont reset but deploy garbage, which should fail the URL check
          service: deployment-ansible
          command: bash -c 'cd /deploy/test-app-engine-python && echo "foo" > main.py && ! CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="${GOOGLE_KEY_CONTENT_TEST_PYTHON}" codeship_app_engine_deploy -f /deploy/test-app-engine-python -P codeship-deploy-test-py -c'
    - name: go based deployment checks
      type: serial
      steps:
        - name: test go app engine deployment
          service: deployment-ansible
          command: bash -c 'CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="${GOOGLE_KEY_CONTENT_TEST_GO}" codeship_app_engine_deploy -f /deploy/test-app-engine-go -P codeship-deploy-test-go -c'
        - name: negative test check URL not existin
          service: deployment-ansible
          command: bash -c '! CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="${GOOGLE_KEY_CONTENT_TEST_GO}" codeship_app_engine_deploy -f /deploy/test-app-engine-go -P codeship-deploy-test-go -c -u http://foo.bar.baz'
    - name: test php app engine deployment
      service: deployment-ansible
      command: bash -c 'CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="${GOOGLE_KEY_CONTENT_TEST_PHP}" codeship_app_engine_deploy -f /deploy/test-app-engine-php -P codeship-deploy-test-php -c'
    - name: negative test detects invalid JSON
      service: deployment-ansible
      command: bash -c '! CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="${GOOGLE_KEY_CONTENT_TEST_NO_JSON}" codeship_app_engine_deploy -f /deploy/test-app-engine-php -P codeship-deploy-test-php -c'
    - name: test node app engine deployment
      service: deployment-ansible
      command: bash -c "CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="${GOOGLE_KEY_CONTENT_TEST_NODE}" codeship_app_engine_deploy -f /deploy/test-app-engine-node -P codeship-deploy-test-node -c"
- name: Test
  type: parallel
  steps:
    - name: Test Deployment
      service: deployment
      command: /deploy/test/deploy_to_google.sh
    - name: Test dockercfg Generator
      type: serial
      steps:
        - name: Build
          service: dockercfg-generator
          command: /dev/null
        - name: Test Push
          service: dockercfg-test
          type: push
          image_name: gcr.io/key-airlock-160720/codeship-testing
          registry: https://gcr.io
          dockercfg_service: dockercfg-generator
- name: Deploy (to Docker Hub)
  type: serial
  tag: master
  steps:
    - name: Push Deployment
      service: deployment
      type: push
      image_name: codeship/google-cloud-deployment
      registry: https://index.docker.io/v1/
      encrypted_dockercfg_path: dockercfg.encrypted
    - name: Push dockercfg Generator
      service: dockercfg-generator
      type: push
      image_name: codeship/gcr-dockercfg-generator
      encrypted_dockercfg_path: dockercfg.encrypted
